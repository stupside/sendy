/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/peer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Connect to a session. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The code to connect to the session. */
                        code: string;
                        device: {
                            /**
                             * Format: ipv4
                             * @description The ip of the device.
                             */
                            ip?: string;
                            /** @description The agent attached to the device. */
                            agent?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The client token. */
                            token: string;
                            /** @description The id of the device. */
                            device: number;
                            /** @description The id of the session. */
                            session: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a session. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: ipv4
                         * @description The ip of the device.
                         */
                        ip?: string;
                        /** @description The agent attached to the device. */
                        agent?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The token for the session. */
                            token: string;
                            /** @description The id of the device. */
                            device: number;
                            /** @description The id of the session. */
                            session: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hooks/sse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Subscribe to server sent events */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": {
                            metadata: {
                                /** @description The id of the media. */
                                id: number;
                                /** @description The type of the media. */
                                type: "text" | "image" | "video" | "audio";
                            };
                            /** @enum {string} */
                            event: "/media/cast";
                        } | {
                            metadata: {
                                /** @description The id of the device. */
                                device: number;
                            };
                            /** @enum {string} */
                            event: "/session/peer";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medias/cast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Cast a media. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The value of the media. */
                        value: string;
                    } & (({
                        /** @enum {string} */
                        type: "text";
                    } & {
                        metadata: {
                            /** @description Whether the text is sensitive or not. */
                            sensitive: boolean;
                        };
                        /** @enum {string} */
                        handler: "default";
                    }) | ({
                        /** @enum {string} */
                        type: "video";
                    } & ({
                        metadata: Record<string, never>;
                        /** @enum {string} */
                        handler: "default";
                    } | {
                        metadata: {
                            /** @description The tmdbid of the movie. */
                            tmdbid: number;
                        };
                        /** @enum {string} */
                        handler: "movie";
                    } | {
                        metadata: {
                            /** @description The tmdbid of the serie. */
                            tmdbid: number;
                        };
                        /** @enum {string} */
                        handler: "serie";
                    })) | ({
                        /** @enum {string} */
                        type: "image";
                    } & {
                        metadata: Record<string, never>;
                        /** @enum {string} */
                        handler: "default";
                    }) | ({
                        /** @enum {string} */
                        type: "audio";
                    } & {
                        metadata: Record<string, never>;
                        /** @enum {string} */
                        handler: "default";
                    }));
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The id of the media. */
                            id: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medias/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a media by id. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the media. */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The value of the media. */
                            value: string;
                        } & (({
                            /** @enum {string} */
                            type: "text";
                        } & {
                            metadata: {
                                /** @description Whether the text is sensitive or not. */
                                sensitive: boolean;
                            };
                            /** @enum {string} */
                            handler: "default";
                        }) | ({
                            /** @enum {string} */
                            type: "video";
                        } & ({
                            metadata: Record<string, never>;
                            /** @enum {string} */
                            handler: "default";
                        } | {
                            metadata: {
                                /** @description The tmdbid of the movie. */
                                tmdbid: number;
                            };
                            /** @enum {string} */
                            handler: "movie";
                        } | {
                            metadata: {
                                /** @description The tmdbid of the serie. */
                                tmdbid: number;
                            };
                            /** @enum {string} */
                            handler: "serie";
                        })) | ({
                            /** @enum {string} */
                            type: "image";
                        } & {
                            metadata: Record<string, never>;
                            /** @enum {string} */
                            handler: "default";
                        }) | ({
                            /** @enum {string} */
                            type: "audio";
                        } & {
                            metadata: Record<string, never>;
                            /** @enum {string} */
                            handler: "default";
                        }));
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medias/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get history of casted medias for the current session. */
        get: {
            parameters: {
                query?: {
                    /** @description The type of the media. */
                    type?: "text" | "image" | "video" | "audio";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /** @description The id of the media. */
                            id: number;
                            /** @description When the media was casted. */
                            date: number;
                        } & (({
                            /** @enum {string} */
                            type: "text";
                        } & {
                            metadata: {
                                /** @description Whether the text is sensitive or not. */
                                sensitive: boolean;
                            };
                            /** @enum {string} */
                            handler: "default";
                        }) | ({
                            /** @enum {string} */
                            type: "video";
                        } & ({
                            metadata: Record<string, never>;
                            /** @enum {string} */
                            handler: "default";
                        } | {
                            metadata: {
                                /** @description The tmdbid of the movie. */
                                tmdbid: number;
                            };
                            /** @enum {string} */
                            handler: "movie";
                        } | {
                            metadata: {
                                /** @description The tmdbid of the serie. */
                                tmdbid: number;
                            };
                            /** @enum {string} */
                            handler: "serie";
                        })) | ({
                            /** @enum {string} */
                            type: "image";
                        } & {
                            metadata: Record<string, never>;
                            /** @enum {string} */
                            handler: "default";
                        }) | ({
                            /** @enum {string} */
                            type: "audio";
                        } & {
                            metadata: Record<string, never>;
                            /** @enum {string} */
                            handler: "default";
                        })))[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/server/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the service's configuration. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The configuration of the service. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The code configuration. */
                            code: {
                                /** @description The length of session codes. */
                                len: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate a code to connect to a session. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description The callback URL.
                         */
                        callback: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The code of the session. */
                            code: string;
                            /** @description The QR code of the session. */
                            qrcode: string;
                            /** @description When the code will expire. */
                            expiry: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
