/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/peer": {
    /** @description Connect to a session. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The code to connect to the session. */
            code: string;
            device?: {
              /**
               * Format: ipv4
               * @description The ip of the device.
               */
              ip?: string;
              /** @description The agent attached to the device. */
              agent?: string;
            };
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The client token. */
              token: string;
              /** @description The id of the device. */
              device: number;
              /** @description The id of the session. */
              session: number;
            };
          };
        };
      };
    };
  };
  "/auth/register": {
    /** @description Create a session. */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /**
             * Format: ipv4
             * @description The ip of the device.
             */
            ip?: string;
            /** @description The agent attached to the device. */
            agent?: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The token for the session. */
              token: string;
              /** @description The id of the device. */
              device: number;
              /** @description The id of the session. */
              session: number;
            };
          };
        };
      };
    };
  };
  "/hooks/sse": {
    /** @description Subscribe to server sent events */
    get: {
      responses: {
        /** @description Default Response */
        default: {
          content: {
            "text/event-stream": ({
              metadata: {
                /** @description The id of the media. */
                id: number;
                /** @description The type of the media. */
                type: "text" | "image" | "video" | "audio";
              };
              /** @enum {string} */
              event: "/media/cast";
            }) | {
              metadata: {
                /** @description The id of the device. */
                device: number;
              };
              /** @enum {string} */
              event: "/session/peer";
            };
          };
        };
      };
    };
  };
  "/medias/cast": {
    /** @description Cast a media. */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @description The value of the media. */
            value: string;
          } & (({
            /** @enum {string} */
            type: "text";
          } & {
            metadata: {
              /** @description Whether the text is sensitive or not. */
              sensitive: boolean;
            };
            /** @enum {string} */
            handler: "default";
          }) | ({
            /** @enum {string} */
            type: "video";
          } & ({
            metadata: Record<string, never>;
            /** @enum {string} */
            handler: "default";
          } | {
            metadata: {
              /** @description The ttid of the movie. */
              ttid: string;
            };
            /** @enum {string} */
            handler: "movie";
          } | {
            metadata: {
              /** @description The ttid of the serie. */
              ttid: string;
            };
            /** @enum {string} */
            handler: "serie";
          })) | ({
            /** @enum {string} */
            type: "image";
          } & {
            metadata: Record<string, never>;
            /** @enum {string} */
            handler: "default";
          }) | ({
            /** @enum {string} */
            type: "audio";
          } & {
            metadata: Record<string, never>;
            /** @enum {string} */
            handler: "default";
          }));
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The id of the media. */
              id: number;
            };
          };
        };
      };
    };
  };
  "/medias/{id}": {
    /** @description Retrieve a media by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the media. */
          id: number;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The value of the media. */
              value: string;
            } & (({
              /** @enum {string} */
              type: "text";
            } & {
              metadata: {
                /** @description Whether the text is sensitive or not. */
                sensitive: boolean;
              };
              /** @enum {string} */
              handler: "default";
            }) | ({
              /** @enum {string} */
              type: "video";
            } & ({
              metadata: Record<string, never>;
              /** @enum {string} */
              handler: "default";
            } | {
              metadata: {
                /** @description The ttid of the movie. */
                ttid: string;
              };
              /** @enum {string} */
              handler: "movie";
            } | {
              metadata: {
                /** @description The ttid of the serie. */
                ttid: string;
              };
              /** @enum {string} */
              handler: "serie";
            })) | ({
              /** @enum {string} */
              type: "image";
            } & {
              metadata: Record<string, never>;
              /** @enum {string} */
              handler: "default";
            }) | ({
              /** @enum {string} */
              type: "audio";
            } & {
              metadata: Record<string, never>;
              /** @enum {string} */
              handler: "default";
            }));
          };
        };
      };
    };
  };
  "/medias/history": {
    /** @description Get history of casted medias for the current session. */
    get: {
      parameters: {
        query?: {
          /** @description The type of the media. */
          type?: "text" | "image" | "video" | "audio";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": ({
                /** @description The id of the media. */
                id: number;
                /** @description When the media was casted. */
                date: number;
              } & (({
                /** @enum {string} */
                type: "text";
              } & {
                metadata: {
                  /** @description Whether the text is sensitive or not. */
                  sensitive: boolean;
                };
                /** @enum {string} */
                handler: "default";
              }) | ({
                /** @enum {string} */
                type: "video";
              } & ({
                metadata: Record<string, never>;
                /** @enum {string} */
                handler: "default";
              } | {
                metadata: {
                  /** @description The ttid of the movie. */
                  ttid: string;
                };
                /** @enum {string} */
                handler: "movie";
              } | {
                metadata: {
                  /** @description The ttid of the serie. */
                  ttid: string;
                };
                /** @enum {string} */
                handler: "serie";
              })) | ({
                /** @enum {string} */
                type: "image";
              } & {
                metadata: Record<string, never>;
                /** @enum {string} */
                handler: "default";
              }) | ({
                /** @enum {string} */
                type: "audio";
              } & {
                metadata: Record<string, never>;
                /** @enum {string} */
                handler: "default";
              })))[];
          };
        };
      };
    };
  };
  "/server/config": {
    /** @description Get the service's configuration. */
    get: {
      responses: {
        /** @description The configuration of the service. */
        200: {
          content: {
            "application/json": {
              /** @description The code configuration. */
              code: {
                /** @description The length of session codes. */
                len: number;
              };
            };
          };
        };
      };
    };
  };
  "/sessions/code": {
    /** @description Generate a code to connect to a session. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: uri
             * @description The callback URL.
             */
            callback: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The code of the session. */
              code: string;
              /** @description The QR code of the session. */
              qrcode: string;
              /** @description When the code will expire. */
              expiry: number;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
